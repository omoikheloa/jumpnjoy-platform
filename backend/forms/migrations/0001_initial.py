# Generated by Django 4.2.7 on 2025-08-05 15:01

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('owner', 'Owner'), ('staff', 'Staff')], default='staff', max_length=10)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='StaffShift',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=django.utils.timezone.now)),
                ('start_time', models.TimeField(help_text='Shift start time')),
                ('end_time', models.TimeField(blank=True, help_text='Shift end time', null=True)),
                ('role_during_shift', models.CharField(help_text='Role/position during shift', max_length=50)),
                ('notes', models.TextField(blank=True, help_text='Shift notes or observations')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('staff_member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Staff Shift',
                'verbose_name_plural': 'Staff Shifts',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='SafetyCheck',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=django.utils.timezone.now)),
                ('trampoline_id', models.CharField(help_text='Trampoline identifier', max_length=50)),
                ('springs_ok', models.BooleanField(default=True, help_text='Springs in good condition')),
                ('nets_ok', models.BooleanField(default=True, help_text='Safety nets intact')),
                ('foam_pits_ok', models.BooleanField(default=True, help_text='Foam pits properly maintained')),
                ('overall_pass', models.BooleanField(default=True, help_text='Overall safety check passed')),
                ('notes', models.TextField(blank=True, help_text='Additional observations')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('checked_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Safety Check',
                'verbose_name_plural': 'Safety Checks',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='MaintenanceLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(default=django.utils.timezone.now)),
                ('equipment_id', models.CharField(help_text='Equipment identifier', max_length=50)),
                ('maintenance_type', models.CharField(choices=[('routine', 'Routine Maintenance'), ('repair', 'Repair'), ('inspection', 'Inspection')], max_length=20)),
                ('description', models.TextField(help_text='Description of maintenance performed')),
                ('cost', models.DecimalField(blank=True, decimal_places=2, help_text='Cost of maintenance', max_digits=10, null=True)),
                ('next_maintenance_due', models.DateField(blank=True, help_text='Next scheduled maintenance', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('performed_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Maintenance Log',
                'verbose_name_plural': 'Maintenance Logs',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='IncidentReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(default=django.utils.timezone.now)),
                ('incident_type', models.CharField(choices=[('injury', 'Injury'), ('equipment_fault', 'Equipment Fault'), ('other', 'Other')], max_length=20)),
                ('description', models.TextField(help_text='Detailed description of incident')),
                ('location', models.CharField(help_text='Where incident occurred', max_length=100)),
                ('injured_person', models.CharField(blank=True, help_text='Name of injured person if applicable', max_length=100)),
                ('action_taken', models.TextField(help_text='Actions taken in response')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('reported_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Incident Report',
                'verbose_name_plural': 'Incident Reports',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='DailyStats',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=django.utils.timezone.now, help_text='Date for statistics', unique=True)),
                ('visitor_count', models.IntegerField(default=0, help_text='Total visitors for the day')),
                ('cafe_sales', models.DecimalField(decimal_places=2, default=0, help_text='Cafe sales amount', max_digits=10)),
                ('notes', models.TextField(blank=True, help_text='Daily notes or observations')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('recorded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Daily Stats',
                'verbose_name_plural': 'Daily Stats',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='CleaningLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(default=django.utils.timezone.now)),
                ('area', models.CharField(choices=[('restrooms', 'Restrooms'), ('common_areas', 'Common Areas'), ('trampolines', 'Trampoline Areas'), ('cafe', 'Cafe'), ('entrance', 'Entrance')], max_length=20)),
                ('task_completed', models.BooleanField(default=True, help_text='Cleaning task completed')),
                ('supplies_used', models.CharField(blank=True, help_text='Cleaning supplies used', max_length=200)),
                ('notes', models.TextField(blank=True, help_text='Additional cleaning notes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('cleaned_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Cleaning Log',
                'verbose_name_plural': 'Cleaning Logs',
                'ordering': ['-date'],
            },
        ),
    ]
